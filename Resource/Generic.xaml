<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:Controls="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero">

    <!-- Border Style -->
    <Style
        x:Key="SimpleBorderStyle"
        TargetType="{x:Type Border}">
        <Style.Resources>
            <Storyboard
                x:Key="StoryboardFocus">
                <ThicknessAnimationUsingKeyFrames
                    Storyboard.TargetProperty="(Border.BorderThickness)"
                    Storyboard.TargetName="{x:Null}">
                    <EasingThicknessKeyFrame
                        KeyTime="0"
                        Value="0.5" />
                    <EasingThicknessKeyFrame
                        KeyTime="0:0:0.1"
                        Value="1.5" />
                </ThicknessAnimationUsingKeyFrames>
                <ColorAnimationUsingKeyFrames
                    Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
                    Storyboard.TargetName="{x:Null}">
                    <EasingColorKeyFrame
                        KeyTime="0"
                        Value="#FFBDBCBC" />
                    <EasingColorKeyFrame
                        KeyTime="0:0:0.1"
                        Value="#FF5A5A5A" />
                </ColorAnimationUsingKeyFrames>
                <ThicknessAnimationUsingKeyFrames
                    Storyboard.TargetProperty="(Border.Padding)"
                    Storyboard.TargetName="{x:Null}">
                    <EasingThicknessKeyFrame
                        KeyTime="0"
                        Value="5" />
                    <EasingThicknessKeyFrame
                        KeyTime="0:0:0.1"
                        Value="4" />
                </ThicknessAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard
                x:Key="StoryboardLostFocus">
                <ThicknessAnimationUsingKeyFrames
                    Storyboard.TargetProperty="(Border.BorderThickness)"
                    Storyboard.TargetName="{x:Null}">
                    <EasingThicknessKeyFrame
                        KeyTime="0"
                        Value="1.5" />
                    <EasingThicknessKeyFrame
                        KeyTime="0:0:0.1"
                        Value="0.5" />
                </ThicknessAnimationUsingKeyFrames>
                <ColorAnimationUsingKeyFrames
                    Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
                    Storyboard.TargetName="{x:Null}">
                    <EasingColorKeyFrame
                        KeyTime="0"
                        Value="#FF5A5A5A" />
                    <EasingColorKeyFrame
                        KeyTime="0:0:0.1"
                        Value="#FFBDBCBC" />
                </ColorAnimationUsingKeyFrames>
                <ThicknessAnimationUsingKeyFrames
                    Storyboard.TargetProperty="(Border.Padding)"
                    Storyboard.TargetName="{x:Null}">
                    <EasingThicknessKeyFrame
                        KeyTime="0"
                        Value="4" />
                    <EasingThicknessKeyFrame
                        KeyTime="0:0:0.1"
                        Value="5" />
                </ThicknessAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard
                x:Key="StoryboardMouseEnter">
                <ThicknessAnimationUsingKeyFrames
                    Storyboard.TargetProperty="(Border.BorderThickness)"
                    Storyboard.TargetName="{x:Null}">
                    <EasingThicknessKeyFrame
                        KeyTime="0"
                        Value="0.5" />
                    <EasingThicknessKeyFrame
                        KeyTime="0:0:0.1"
                        Value="1.5" />
                </ThicknessAnimationUsingKeyFrames>
                <ThicknessAnimationUsingKeyFrames
                    Storyboard.TargetProperty="(Border.Padding)"
                    Storyboard.TargetName="{x:Null}">
                    <EasingThicknessKeyFrame
                        KeyTime="0"
                        Value="5" />
                    <EasingThicknessKeyFrame
                        KeyTime="0:0:0.1"
                        Value="4" />
                </ThicknessAnimationUsingKeyFrames>
                <ColorAnimationUsingKeyFrames
                    Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
                    Storyboard.TargetName="{x:Null}">
                    <EasingColorKeyFrame
                        KeyTime="0"
                        Value="#FFBDBCBC" />
                    <EasingColorKeyFrame
                        KeyTime="0:0:0.1"
                        Value="#FF949494" />
                </ColorAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard
                x:Key="StoryboardMouseLeave">
                <ThicknessAnimationUsingKeyFrames
                    Storyboard.TargetProperty="(Border.BorderThickness)"
                    Storyboard.TargetName="{x:Null}">
                    <EasingThicknessKeyFrame
                        KeyTime="0"
                        Value="1.5" />
                    <EasingThicknessKeyFrame
                        KeyTime="0:0:0.1"
                        Value="0.5" />
                </ThicknessAnimationUsingKeyFrames>
                <ThicknessAnimationUsingKeyFrames
                    Storyboard.TargetProperty="(Border.Padding)"
                    Storyboard.TargetName="{x:Null}">
                    <EasingThicknessKeyFrame
                        KeyTime="0"
                        Value="4" />
                    <EasingThicknessKeyFrame
                        KeyTime="0:0:0.1"
                        Value="5" />
                </ThicknessAnimationUsingKeyFrames>
                <ColorAnimationUsingKeyFrames
                    Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
                    Storyboard.TargetName="{x:Null}">
                    <EasingColorKeyFrame
                        KeyTime="0"
                        Value="#FF949494" />
                    <EasingColorKeyFrame
                        KeyTime="0:0:0.1"
                        Value="#FFBDBCBC" />
                </ColorAnimationUsingKeyFrames>
            </Storyboard>
        </Style.Resources>
        <Style.Triggers>
            <EventTrigger
                RoutedEvent="FocusManager.GotFocus">
                <BeginStoryboard
                    x:Name="StoryboardFocus_BeginStoryboard"
                    Storyboard="{StaticResource StoryboardFocus}" />
            </EventTrigger>
            <EventTrigger
                RoutedEvent="Mouse.MouseEnter">
                <BeginStoryboard
                    x:Name="StoryboardMouseEnter_BeginStoryboard"
                    Storyboard="{StaticResource StoryboardMouseEnter}" />
            </EventTrigger>
            <EventTrigger
                RoutedEvent="Mouse.MouseLeave">
                <BeginStoryboard
                    x:Name="StoryboardMouseLeave_BeginStoryboard"
                    Storyboard="{StaticResource StoryboardMouseLeave}" />
            </EventTrigger>
            <EventTrigger
                RoutedEvent="FocusManager.LostFocus">
                <BeginStoryboard
                    x:Name="StoryboardLostFocus_BeginStoryboard"
                    Storyboard="{StaticResource StoryboardLostFocus}" />
            </EventTrigger>
        </Style.Triggers>
        <Setter
            Property="CornerRadius"
            Value="3" />
        <Setter
            Property="Padding"
            Value="5" />
        <Setter
            Property="Margin"
            Value="2" />
        <Setter
            Property="Background"
            Value="White" />
        <Setter
            Property="BorderBrush"
            Value="#FFBDBCBC" />
        <Setter
            Property="Effect">
            <Setter.Value>
                <DropShadowEffect
                    Direction="330"
                    Color="#FFA8A8A9"
                    ShadowDepth="1"
                    BlurRadius="5" />
            </Setter.Value>
        </Setter>
        <Setter
            Property="BorderThickness"
            Value="0.5" />
    </Style>

    <!-- Button Style -->
    <LinearGradientBrush
    	x:Key="SecondaryActionButtonBackgroundBrush"
        EndPoint="0.5,1" MappingMode="RelativeToBoundingBox" StartPoint="0.5,0">
    	<GradientStop Color="#FFFBFBFC" Offset="0.026"/>
    	<GradientStop Color="#FFEDEDEE" Offset="0.782"/>
    	<GradientStop Color="#FFEDEDEE" Offset="0.586"/>
    	<GradientStop Color="#FFEDEDEE" Offset="0.442"/>
    	<GradientStop Color="#FFFBFBFC" Offset="0.98"/>
    </LinearGradientBrush>

    <LinearGradientBrush
        x:Key="PrimaryActionButtonBackground"
        EndPoint="0.5,0"
        StartPoint="0.5,1">
        <GradientStop
            Color="#FFF9D00D"
            Offset="0" />
        <GradientStop
            Color="#FFF9D00D"
            Offset="0.30000299215316772" />
        <GradientStop
            Color="#FFFBE828"
            Offset="0.80000299215316772" />
        <GradientStop
            Color="#FFFBE828"
            Offset="1" />
    </LinearGradientBrush>

    <Style
        x:Key="StandardButtonFocusVisualStyle">
        <Setter
            Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle
                        Margin="-2"
                        StrokeThickness="1"
                        Stroke="Black"
                        StrokeDashArray="1 2" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate
        x:Key="StandardButtonTemplate"
        TargetType="{x:Type Button}">
        <Border
            Padding="1">
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup
                    x:Name="CommonStates">
                    <VisualStateGroup.Transitions>
                        <VisualTransition
                            GeneratedDuration="0:0:0.05"
                            To="Pressed">
                            <Storyboard
                                FillBehavior="HoldEnd">
                                <DoubleAnimationUsingKeyFrames
                                    Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                                    Storyboard.TargetName="rectangle">
                                    <EasingDoubleKeyFrame
                                        KeyTime="0:0:0.05"
                                        Value="0.98" />
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames
                                    Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"
                                    Storyboard.TargetName="rectangle">
                                    <EasingDoubleKeyFrame
                                        KeyTime="0:0:0.05"
                                        Value="0.98" />
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames
                                    Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                                    Storyboard.TargetName="border">
                                    <EasingDoubleKeyFrame
                                        KeyTime="0:0:0.05"
                                        Value="0.98" />
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames
                                    Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"
                                    Storyboard.TargetName="border">
                                    <EasingDoubleKeyFrame
                                        KeyTime="0:0:0.05"
                                        Value="0.98" />
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames
                                    Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)"
                                    Storyboard.TargetName="border">
                                    <EasingDoubleKeyFrame
                                        KeyTime="0:0:0.05"
                                        Value="1" />
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames
                                    Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)"
                                    Storyboard.TargetName="border">
                                    <EasingDoubleKeyFrame
                                        KeyTime="0:0:0.05"
                                        Value="1" />
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                        </VisualTransition>
                    </VisualStateGroup.Transitions>
                    <VisualState
                        x:Name="Normal" />
                    <VisualState
                        x:Name="MouseOver" />
                    <VisualState
                        x:Name="Pressed">
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames
                                Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                                Storyboard.TargetName="rectangle">
                                <EasingDoubleKeyFrame
                                    KeyTime="0"
                                    Value="0.98" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames
                                Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                                Storyboard.TargetName="border">
                                <EasingDoubleKeyFrame
                                    KeyTime="0"
                                    Value="0.98" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames
                                Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"
                                Storyboard.TargetName="rectangle">
                                <EasingDoubleKeyFrame
                                    KeyTime="0"
                                    Value="0.98" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames
                                Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"
                                Storyboard.TargetName="border">
                                <EasingDoubleKeyFrame
                                    KeyTime="0"
                                    Value="0.98" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames
                                Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)"
                                Storyboard.TargetName="border">
                                <EasingDoubleKeyFrame
                                    KeyTime="0"
                                    Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames
                                Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)"
                                Storyboard.TargetName="border">
                                <EasingDoubleKeyFrame
                                    KeyTime="0"
                                    Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState
                        x:Name="Disabled" />
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid>
                <Rectangle
                    x:Name="rectangle"
                    Fill="#FF676767"
                    Stretch="Fill"
                    RadiusX="3"
                    RadiusY="3"
                    Margin="1,1,-1,-1"
                    RenderTransformOrigin="0.5,0.5">
                	<Rectangle.Effect>
                		<BlurEffect/>
                	</Rectangle.Effect>
                    <Rectangle.RenderTransform>
                        <TransformGroup>
                            <ScaleTransform />
                            <SkewTransform />
                            <RotateTransform />
                            <TranslateTransform />
                        </TransformGroup>
                    </Rectangle.RenderTransform>
                </Rectangle>
                <Border
                    x:Name="border"
                    CornerRadius="3"
                    Background="{TemplateBinding Background}"
                    Padding="{TemplateBinding Padding}"
                    RenderTransformOrigin="0.5,0.5" BorderThickness="1" BorderBrush="#FFBCBBBB">
                    <Border.RenderTransform>
                        <TransformGroup>
                            <ScaleTransform />
                            <SkewTransform />
                            <RotateTransform />
                            <TranslateTransform />
                        </TransformGroup>
                    </Border.RenderTransform>
                    <ContentPresenter
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                        Margin="{TemplateBinding Padding}"
                        RecognizesAccessKey="True"
                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                        TextOptions.TextFormattingMode="Display"
                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                </Border>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger
                Property="IsEnabled"
                Value="false">
                <Setter
                    Property="Foreground"
                    Value="#A1A1A1" />
                <Setter
                    TargetName="rectangle"
                    Property="Fill"
                    Value="#FFFFFF" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style
        x:Key="StandardButtonStyle"
        TargetType="{x:Type Button}">
        <Setter
            Property="OverridesDefaultStyle"
            Value="True" />
        <Setter
            Property="HorizontalContentAlignment"
            Value="Center" />
        <Setter
            Property="Cursor"
            Value="Hand" />
        <Setter
            Property="FontSize"
            Value="12" />
        <Setter
            Property="VerticalContentAlignment"
            Value="Center" />
        <Setter
            Property="VerticalAlignment"
            Value="Center" />
        <Setter
            Property="HorizontalAlignment"
            Value="Left" />
        <Setter
            Property="Padding"
            Value="5,0,5,0" />
        <Setter
            Property="Height"
            Value="25" />
        <Setter
            Property="Margin"
            Value="0,5,5,5" />

        <Setter
            Property="FocusVisualStyle"
            Value="{StaticResource StandardButtonFocusVisualStyle}" />

        <Setter
            Property="Template"
            Value="{StaticResource StandardButtonTemplate}" />
        <Setter
            Property="Background"
            Value="{StaticResource SecondaryActionButtonBackgroundBrush}" />
    </Style>

    <Style
        x:Key="PrimaryActionButtonStyle"
        TargetType="{x:Type Button}"
        BasedOn="{StaticResource StandardButtonStyle}">
        <Setter
            Property="Background"
            Value="{StaticResource PrimaryActionButtonBackground}" />
        <Setter
            Property="Template"
            Value="{StaticResource StandardButtonTemplate}" />
        <Style.Triggers>
            <Trigger
                Property="IsEnabled"
                Value="false">
                <Setter
                    Property="Background"
                    Value="{StaticResource SecondaryActionButtonBackgroundBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <!--TextBox -->
    <ControlTemplate
        x:Key="StandardTextBoxTemplate"
        TargetType="{x:Type TextBox}">
        <!-- Adorners MUST be the direct child of the ControlTemplate, do not make a child of any other UIElement type - Chris Nicol -->
        <Grid>
            <Border
                x:Name="PART_MainBorder"
                CornerRadius="2"
                Padding="1,0,0,0"
                BorderBrush="{TemplateBinding BorderBrush}"
                Background="{TemplateBinding Background}"
                BorderThickness="{TemplateBinding BorderThickness}">
                <ScrollViewer
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                    x:Name="PART_ContentHost" />
                <Border.RenderTransform>
                    <TransformGroup>
                        <ScaleTransform />
                        <SkewTransform />
                        <RotateTransform />
                        <TranslateTransform />
                    </TransformGroup>
                </Border.RenderTransform>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger
                Property="IsEnabled"
                Value="False">
                <Setter
                    Property="Background"
                    TargetName="PART_MainBorder"
                    Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                <Setter
                    Property="Foreground"
                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            </Trigger>
            <Trigger
                Property="IsReadOnly"
                Value="True">
                <Setter
                    Property="BorderThickness"
                    Value="0" />
                <Setter
                    TargetName="PART_MainBorder"
                    Property="Margin"
                    Value="-4,0,0,0" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition
                        Property="IsReadOnly"
                        Value="False" />
                    <Condition
                        Property="IsFocused"
                        Value="True" />
                </MultiTrigger.Conditions>
                <Setter
                    Property="LayoutTransform">
                    <Setter.Value>
                        <ScaleTransform
                            ScaleX="1.02"
                            ScaleY="1.02" />
                    </Setter.Value>
                </Setter>
                <Setter
                    Property="Border.Effect">
                    <Setter.Value>
                        <DropShadowEffect
                            ShadowDepth="1"
                            Direction="272"
                            BlurRadius="7" />
                    </Setter.Value>
                </Setter>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition
                        Property="Validation.HasError"
                        Value="True" />
                    <Condition
                        Property="IsFocused"
                        Value="False" />
                </MultiTrigger.Conditions>
                <Setter
                    Property="Border.BorderBrush"
                    Value="Red" />
                <Setter
                    Property="Border.CornerRadius"
                    Value="3" />
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style
        x:Key="StandardTextBoxStyle"
        TargetType="{x:Type TextBox}">
        <Setter
            Property="IsReadOnly"
            Value="False" />
        <Setter
            Property="AutomationProperties.AutomationId"
            Value="{Binding RelativeSource={RelativeSource Self}, Path=Name}" />
        <Setter
            Property="Background"
            Value="White" />
        <Setter
            Property="Padding"
            Value="0" />
        <Setter
            Property="Margin"
            Value="0,0,5,0" />
        <Setter
            Property="HorizontalAlignment"
            Value="Left" />
        <Setter
            Property="BorderBrush"
            Value="#FF676767" />
        <Setter
            Property="BorderThickness"
            Value="1" />
        <Setter
            Property="Height"
            Value="20" />
        <Setter
            Property="FontSize"
            Value="12" />
        <Setter
            Property="VerticalContentAlignment"
            Value="Center" />
        <Setter
            Property="VerticalAlignment"
            Value="Center" />
        <Setter
            Property="Template"
            Value="{StaticResource StandardTextBoxTemplate}" />
    </Style>
    
    
    <!-- Label Style -->
    <Style
        x:Key="FieldLabelStyle"
        TargetType="{x:Type Label}">
        <Setter
            Property="Background"
            Value="Transparent" />
        <Setter
            Property="FontFamily"
            Value="Segoe UI" />
        <Setter
            Property="Foreground"
            Value="Gray" />
        <Setter
            Property="FontSize"
            Value="14" />
        <Setter
            Property="Margin"
            Value="0,5,0,-5" />
        <Setter
            Property="Padding"
            Value="0,5,5,5" />
        <Setter
            Property="HorizontalAlignment"
            Value="Left" />
    </Style>
    
    
    <!-- TextBlock-->
    <Style
        x:Key="HeaderTextBlockStyle"
        TargetType="{x:Type TextBlock}">
        <Setter
            Property="Background"
            Value="Transparent" />
        <Setter
            Property="FontFamily"
            Value="Segoe UI" />
        <Setter
            Property="Foreground"
            Value="Black" />
        <Setter
            Property="FontSize"
            Value="18" />
        <Setter
            Property="Margin"
            Value="0,5" />
        <Setter
            Property="HorizontalAlignment"
            Value="Left" />
    </Style>



    <!-- DataGridColumnHeader -->
    <ControlTemplate
        x:Key="DataGridColumnHeaderSprintTemplate"
        TargetType="{x:Type DataGridColumnHeader}">
        <Grid>
            <Controls:DataGridHeaderBorder
                x:Name="headerBorder"
                SortDirection="{TemplateBinding SortDirection}"
                IsHovered="{TemplateBinding IsMouseOver}"
                IsPressed="{TemplateBinding IsPressed}"
                IsClickable="{TemplateBinding CanUserSort}"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                Padding="{TemplateBinding Padding}"
                SeparatorVisibility="{TemplateBinding SeparatorVisibility}"
                SeparatorBrush="{TemplateBinding SeparatorBrush}">
                <Border>
                    <TextBlock
                        Margin="0,0,3,0"
                        TextWrapping="Wrap"
                        Style="{DynamicResource Base_FontStyle}"
                        FontSize="{DynamicResource BiggerFontSize}"
                        FontWeight="Medium"
                        Text="{Binding}"
                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                </Border>
            </Controls:DataGridHeaderBorder>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger
                Property="IsMouseOver"
                Value="True">
                <Setter
                    TargetName="headerBorder"
                    Property="Background"
                    Value="White" />
            </Trigger>
            <Trigger
                Property="IsPressed"
                Value="True">
                <Setter
                    TargetName="headerBorder"
                    Property="Background"
                    Value="White" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- DataGridRowHeader -->

    <ControlTemplate
        x:Key="DataGridRowHeaderSprintTemplate"
        TargetType="{x:Type DataGridRowHeader}">
        <Border
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            Padding="{TemplateBinding Padding}">
            <ContentPresenter
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                VerticalAlignment="Center" />
        </Border>
    </ControlTemplate>

    <ControlTemplate
        x:Key="DataGridCellSprintTemplate"
        TargetType="{x:Type DataGridCell}">
        <Border
            Padding="{TemplateBinding Padding}">
            <ContentPresenter
                Margin="0,0,3,0"
                TextElement.FontFamily="{DynamicResource BaseFontFamily}"
                TextElement.FontSize="{DynamicResource BaseFontSize}"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                VerticalAlignment="{TemplateBinding VerticalAlignment}" />
        </Border>
    </ControlTemplate>

    <!-- DataGrid -->
    <ControlTemplate
        x:Key="DataGridSprintTemplate"
        TargetType="{x:Type DataGrid}">
        <Border
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            SnapsToDevicePixels="True"
            Padding="{TemplateBinding Padding}">
            <ScrollViewer
                Focusable="false"
                Name="DG_ScrollViewer">
                <ScrollViewer.Template>
                    <ControlTemplate
                        TargetType="{x:Type ScrollViewer}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition
                                    Height="Auto" />
                                <RowDefinition
                                    Height="*" />
                                <RowDefinition
                                    Height="Auto" />
                            </Grid.RowDefinitions>

                            <Grid.ColumnDefinitions>
                                <ColumnDefinition
                                    Width="Auto" />
                                <ColumnDefinition
                                    Width="*" />
                                <ColumnDefinition
                                    Width="Auto" />
                            </Grid.ColumnDefinitions>


                            <!--Column Headers-->
                            <DataGridColumnHeadersPresenter
                                Grid.Column="1"
                                Name="PART_ColumnHeadersPresenter"
                                Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=HeadersVisibility, Converter={x:Static DataGrid.HeadersVisibilityConverter}, ConverterParameter={x:Static DataGridHeadersVisibility.Column}}" />

                            <!--DataGrid content-->
                            <ScrollContentPresenter
                                x:Name="PART_ScrollContentPresenter"
                                Grid.Row="1"
                                Grid.ColumnSpan="2"
                                CanContentScroll="{TemplateBinding CanContentScroll}" />

                            <ScrollBar
                                Grid.Row="0"
                                Grid.RowSpan="2"
                                Grid.Column="2"
                                Name="PART_VerticalScrollBar"
                                Orientation="Vertical"
                                Maximum="{TemplateBinding ScrollableHeight}"
                                ViewportSize="{TemplateBinding ViewportHeight}"
                                Value="{Binding Path=VerticalOffset, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                                Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" />

                            <Grid
                                Grid.Row="2"
                                Grid.Column="1">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition
                                        Width="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=NonFrozenColumnsViewportHorizontalOffset}" />
                                    <ColumnDefinition
                                        Width="*" />
                                </Grid.ColumnDefinitions>
                                <ScrollBar
                                    Grid.Column="1"
                                    Name="PART_HorizontalScrollBar"
                                    Orientation="Horizontal"
                                    Maximum="{TemplateBinding ScrollableWidth}"
                                    ViewportSize="{TemplateBinding ViewportWidth}"
                                    Value="{Binding Path=HorizontalOffset, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                                    Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" />
                            </Grid>
                        </Grid>
                    </ControlTemplate>
                </ScrollViewer.Template>
                <ItemsPresenter
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </ScrollViewer>
        </Border>
    </ControlTemplate>

    <!-- DataGridColumnHeader Style -->
    <Style
        x:Key="PlainColumnHeaderSprintStyle"
        TargetType="{x:Type DataGridColumnHeader}">
        <Setter
            Property="VerticalContentAlignment"
            Value="Top" />
        <Setter
            Property="Background"
            Value="White" />
        <Setter
            Property="BorderBrush"
            Value="White" />
        <Setter
            Property="BorderThickness"
            Value="0" />
        <Setter
            Property="Padding"
            Value="0,5" />
        <Setter
            Property="Template"
            Value="{DynamicResource DataGridColumnHeaderSprintTemplate}" />

    </Style>
    <!-- DataGridRowHeader Style -->
    <Style
        x:Key="PlainDataGridRowHeaderSprintStyle"
        TargetType="{x:Type DataGridRowHeader}">
        <Setter
            Property="Background"
            Value="White" />
        <Setter
            Property="BorderThickness"
            Value="0" />
        <Setter
            Property="Template"
            Value="{DynamicResource DataGridRowHeaderSprintTemplate}" />
    </Style>

    <Style
        x:Key="PlainCellSprintStyle"
        TargetType="{x:Type DataGridCell}">
        <Setter
            Property="BorderThickness"
            Value="0" />
        <Setter
            Property="Padding"
            Value="0,0,5,5" />
        <Setter
            Property="VerticalAlignment"
            Value="Top" />
        <Setter
            Property="Template"
            Value="{DynamicResource DataGridCellSprintTemplate}" />
        <Style.Triggers>
            <Trigger
                Property="IsSelected"
                Value="True">
                <Setter
                    Property="Background"
                    Value="White" />
                <Setter
                    Property="BorderThickness"
                    Value="0" />
                <Setter
                    Property="Foreground"
                    Value="Black" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="CellWithBottonLineSprintStyle"
        BasedOn="{StaticResource PlainCellSprintStyle}"
        TargetType="{x:Type DataGridCell}">

        <Setter
            Property="Padding"
            Value="0,0,2,5" />
    </Style>

    <Style
        x:Key="RowWithBorderSprintStyle"
        TargetType="{x:Type DataGridRow}">

        <Setter
            Property="BorderThickness"
            Value="1, 0.75" />

        <Setter
            Property="BorderBrush"
            Value="{DynamicResource GrayBrush}" />
    </Style>

    <Style
        x:Key="RowWithBottonLineSprintStyle"
        TargetType="{x:Type DataGridRow}">

        <Setter
            Property="BorderThickness"
            Value="0,0,0,1" />

        <Setter
            Property="BorderBrush"
            Value="{DynamicResource MediumGrayBrush}" />
    </Style>

    <!-- DataGrid Style -->
    <Style
        x:Key="PlainDataGridSprintStyle"
        TargetType="{x:Type DataGrid}">
        <Setter
            Property="ColumnHeaderStyle"
            Value="{StaticResource PlainColumnHeaderSprintStyle}" />
        <Setter
            Property="CellStyle"
            Value="{StaticResource PlainCellSprintStyle}" />
        <Setter
            Property="RowHeaderStyle"
            Value="{StaticResource PlainDataGridRowHeaderSprintStyle}" />
        <Setter
            Property="CanUserAddRows"
            Value="False" />
        <Setter
            Property="CanUserDeleteRows"
            Value="False" />
        <Setter
            Property="CanUserResizeRows"
            Value="False" />
        <Setter
            Property="CanUserSortColumns"
            Value="False" />
        <Setter
            Property="CanUserReorderColumns"
            Value="False" />
        <Setter
            Property="AutoGenerateColumns"
            Value="False" />
        <Setter
            Property="Background"
            Value="White" />
        <Setter
            Property="Foreground"
            Value="Black" />
        <Setter
            Property="BorderBrush"
            Value="White" />
        <Setter
            Property="HorizontalGridLinesBrush"
            Value="White" />
        <Setter
            Property="VerticalGridLinesBrush"
            Value="White" />
        <Setter
            Property="AlternatingRowBackground"
            Value="White" />
        <Setter
            Property="BorderThickness"
            Value="0" />
        <!-- This is needed to force DG to have a non-default value.  Otherwise the DGR.DetailsVisibility cannot have a value of VisibleWhenSelected by default. -->
        <Setter
            Property="RowDetailsVisibilityMode"
            Value="VisibleWhenSelected" />
        <Setter
            Property="ScrollViewer.CanContentScroll"
            Value="true" />
        <Setter
            Property="Template"
            Value="{DynamicResource DataGridSprintTemplate}" />
        <Style.Triggers>
            <Trigger
                Property="IsGrouping"
                Value="true">
                <Setter
                    Property="ScrollViewer.CanContentScroll"
                    Value="false" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="DataGridWithHorizontalLinesSprintStyle"
        BasedOn="{StaticResource PlainDataGridSprintStyle}"
        TargetType="{x:Type DataGrid}">

        <Setter
            Property="CellStyle"
            Value="{StaticResource CellWithBottonLineSprintStyle}" />

        <Setter
            Property="RowStyle"
            Value="{StaticResource RowWithBottonLineSprintStyle}" />
    </Style>


</ResourceDictionary>